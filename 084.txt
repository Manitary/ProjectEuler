nmod:=func<n,m|n mod m eq 0 select m else n mod m>;

// 2D6 version 
// Dice:=Matrix([[(j-i) mod 40 in [2..12] select (6-Abs(((j-i) mod 40)-7))/36 else 0:j in [1..40]]:i in [1..40]]);

// 2D4 version
Dice:=Matrix([[(j-i) mod 40 in [2..8] select (4-Abs(((j-i) mod 40)-5))/16 else 0:j in [1..40]]:i in [1..40]]);

Events:=DiagonalMatrix(RationalField(),40,[1:i in [1..40]]);
Events[31,31]:=0;
Events[31,11]:=1;
for i in [3,18,34] do
	Events[i,i]:=14/16;
	Events[i,1]:=1/16;
	Events[i,11]:=1/16;
end for;
for i in [8,23,37] do
	r:=nmod(i+Min([nmod(R-i,40):R in [6,16,26,36]]),40);
	u:=nmod(i+Min([nmod(U-i,40):U in [13,29]]),40);
	Events[i,i]:=6/16;
	for j in [1,6,11,12,25,40,i-3,r,r,u] do
		Events[i,j]+:=1/16;
	end for;
end for;

Markov:=Dice*Events;

stationary:=[(Eigenspace(Markov,1).1)[i]:i in [1..40]];
stationary:=[v/&+stationary:v in stationary];
cells:=[i:i in [1..40]];
ParallelSort(~stationary,~cells);
Reverse(~cells);
str:="";
for i in [1..3] do
	w:=IntegerToString(cells[i]-1);
	if #w eq 1 then
		w:="0"*w;
	end if;
	str*:=w;
end for;
str;