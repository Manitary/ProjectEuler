d:=9;
d1:=Iroot(d,2);

procedure update_viable (grid,~viable)
	for r in [1..d], c in [1..d] do
		if grid[r][c] ne 0 then
			viable[r][c]:=[];
		else
			for i in [1..d] do
				Exclude(~viable[r][c],grid[r][i]);
				Exclude(~viable[r][c],grid[i][c]);
			end for;
			for i in [d1*((r-1) div d1)+1..d1*((r-1) div d1)+d1],j in [d1*((c-1) div d1)+1..d1*((c-1) div d1)+d1] do
				Exclude(~viable[r][c],grid[i,j]);
			end for;
		end if;
	end for;
end procedure;

procedure add_unique (~grid,~viable)
	while true do
		found:=false;
		update_viable(grid,~viable);
		for r in [1..d], c in [1..d] do
			if #viable[r][c] eq 1 then
				grid[r][c]:=Representative(viable[r][c]);
				viable[r][c]:=[];
				found:=true;
			end if;
		end for;
		if not(found) then
			break;
		end if;
	end while;
end procedure;

procedure fill_unique (~grid,~viable)
	while true do
		found:=false;
		update_viable(grid,~viable);
		for i in [1..d] do
			row:=&cat[viable[i,c]:c in [1..d]];
			col:=&cat[viable[r,i]:r in [1..d]];
			for num in row do
				if Multiplicity(row,num) eq 1 then
					for c in [1..d] do
						if num in viable[i][c] then
							grid[i][c]:=num;
							found:=true;
							break i;
						end if;
					end for;
				end if;
			end for;
			for num in col do
				if Multiplicity(col,num) eq 1 then
					for r in [1..d] do
						if num in viable[r][i] then
							grid[r][i]:=num;
							found:=true;
							break i;
						end if;
					end for;
				end if;
			end for;
		end for;
		if not(found) then
			break;
		end if;
		for i in [1..d1], j in [1..d1] do
			cell:=&cat[viable[r][c]:r in [3*i-2..3*i],c in [3*j-2..3*j]];
			for num in cell do
				if Multiplicity(cell,num) eq 1 then
					for r in [3*i-2..3*i], c in [3*j-2..3*j] do
						if num in viable[r][c] then
							grid[r][c]:=num;
							found:=true;
							break i;
						end if;
					end for;
				end if;
			end for;
		end for;
		if not(found) then
			break;
		end if;
	end while;
end procedure;

forward solve;
procedure test(~grid,~viable,~solvable)

	for r in [1..d], c in [1..d], n in viable[r][c] do
		grid_copy:=grid;
		viable_copy:=viable;
		grid_copy[r][c]:=n;
		solve(~grid_copy,~solvable);
		if 0 notin &cat(grid_copy) then
			grid:=grid_copy;
			break r;
		else
			for i in [1..d], j in [1..d] do
				if grid_copy[i][j] eq 0 and #viable_copy[i][j] eq 0 then
					solvable:=false;
					break n;
				end if;
			end for;
		end if;
	end for;
end procedure;

procedure solve(~grid,~solvable)
	viable:=[[[i:i in [1..d]]:j in [1..d]]:k in [1..d]];
	while true do
		old:=grid;
		add_unique(~grid,~viable);
		fill_unique(~grid,~viable);
		if old eq grid then
			if 0 in &cat(grid) then
				for i in [1..d], j in [1..d] do
					if grid[i][j] eq 0 and #viable[i][j] eq 0 then
						solvable:=false;
						break;
					end if;
				end for;
				if solvable then
					test(~grid,~viable,~solvable);
				else
					break;
				end if;
			else
				solvable:=true;
				break;
			end if;
		end if;
	end while;
end procedure;

F:=Open("p096_sudoku.txt","r");
sum:=0;
while true do
	g:=Gets(F);
	if IsEof(g) then
		break;
	end if;
	grid:=[];
	viable:=[[{i:i in [1..d]}:j in [1..d]]:k in [1..d]];
	for l in [1..d] do
		w:=Gets(F);
		Append(~grid,[StringToInteger(m):m in Eltseq(w)]);
	end for;
	solvable:=true;
	solve(~grid,~solvable);
	sum+:=Seqint([grid[1][k]:k in [3..1 by -1]]);
end while;
sum;